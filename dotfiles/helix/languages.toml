# This file configures language-specific settings for Helix,
# including Language Server Protocol (LSP) servers and formatters.

# --- C Language Configuration ---
[[language]]
name = "c"
scope = "source.c"
file-types = ["c", "h"] # 'h' can be ambiguous, but often used with C
roots = [
  "compile_commands.json",
  "Makefile",
  "makefile",
  "CMakeLists.txt",
  ".git",
  "meson.build",
]
language-servers = ["clangd"]
indent = { tab-width = 4, unit = "    " }
auto-format = true
formatter = { command = "clang-format", args = ["-"] } # Reads from stdin

# --- C++ Language Configuration ---
[[language]]
name = "cpp" # 'cpp' is the conventional name Helix uses
scope = "source.cpp"
file-types = [
  "cpp",
  "cxx",
  "cc",
  "hpp",
  "hxx",
  "hh",
  "C",
  "H",
] # Common C++ extensions
roots = [
  "compile_commands.json",
  "Makefile",
  "makefile",
  "CMakeLists.txt",
  ".git",
  "meson.build",
]
language-servers = ["clangd"] # clangd handles both C and C++
indent = { tab-width = 4, unit = "    " }
auto-format = true
formatter = { command = "clang-format", args = ["-"] } # Reads from stdin

# --- Python Language Configuration ---
[[language]]
name = "python"
scope = "source.python"
file-types = ["py", "pyi", "pyw"]
shebangs = ["python", "python3"]
roots = [
  "pyproject.toml",
  "ruff.toml", # Added ruff config files to roots
  ".ruff.toml", # Added ruff config files to roots
  "setup.py",
  "poetry.lock",
  "Pipfile",
  ".git",
  "requirements.txt",
  "setup.cfg",
  ".venv",
  "venv",
]
language-servers = ["ruff", "pylsp"] # Prioritize ruff
indent = { tab-width = 4, unit = "    " }
auto-format = true
# Formatter line removed; ruff server should handle formatting via LSP

# --- TypeScript/JavaScript Language Configuration ---
[[language]]
name = "typescript"
scope = "source.tsx"
file-types = ["ts", "tsx", "js", "jsx", "mjs", "cjs"]
shebangs = ["node"]
roots = [
  "package.json",
  "tsconfig.json",
  "jsconfig.json",
  ".git",
  "deno.json",
  "deno.jsonc",
  "dprint.json",
]
language-servers = ["typescript-language-server"]
indent = { tab-width = 2, unit = "  " }
auto-format = true
formatter = { command = "dprint", args = ["fmt", "--stdin-filename", "%"] }

# --- JSON Language Configuration ---
[[language]]
name = "json"
scope = "source.json"
file-types = ["json", "jsonc", ".json5"]
roots = [".git", "package.json", "dprint.json"]
language-servers = ["json-language-server"]
indent = { tab-width = 2, unit = "  " }
auto-format = true
formatter = { command = "dprint", args = [
  "fmt",
  "--stdin-filename",
  "%",
  "--language",
  "json",
] }

# --- TOML Language Configuration ---
[[language]]
name = "toml"
scope = "source.toml"
file-types = ["toml"]
roots = [".git", "Cargo.toml", "pyproject.toml"]
language-servers = ["taplo-lsp"]
indent = { tab-width = 2, unit = "  " }
auto-format = true
formatter = { command = "taplo", args = ["format", "-"] }

# --- YAML Language Configuration ---
[[language]]
name = "yaml"
scope = "source.yaml"
file-types = ["yaml", "yml"]
roots = [".git", "dprint.json"]
language-servers = ["yaml-language-server"]
indent = { tab-width = 2, unit = "  " }
auto-format = true
formatter = { command = "dprint", args = [
  "fmt",
  "--stdin-filename",
  "%",
  "--language",
  "yaml",
] }

# --- Markdown Language Configuration ---
[[language]]
name = "markdown"
scope = "source.md"
file-types = ["md", "markdown"]
roots = [".git", "dprint.json"]
comment-token = "<!-- -->"
language-servers = ["marksman"]
indent = { tab-width = 4, unit = "    " }
auto-format = true
formatter = { command = "dprint", args = [
  "fmt",
  "--stdin-filename",
  "%",
  "--language",
  "md",
] }

# --- Zig Language Configuration ---
[[language]]
name = "zig"
scope = "source.zig"
file-types = ["zig", "zir"]
roots = ["build.zig", ".git"]
language-servers = ["zls"]
auto-format = true
[language.formatter]
command = "zig"
args = ["fmt", "--stdin"]

# --- Rust Language Configuration ---
[[language]]
name = "rust"
scope = "source.rust"
injection-regex = "rust"
file-types = ["rs"]
roots = ["Cargo.toml", "Cargo.lock"]
language-servers = ["rust-analyzer"]
indent = { tab-width = 4, unit = "    " }
auto-format = true
formatter = { command = "rustfmt", args = ["--edition", "2021"] }


# --- Language Server Definitions ---

[language-server.clangd]
command = "clangd"
# If you want to force using clangd from your llvm20 path and it's NOT first in your system PATH:
# command = "/usr/lib64/llvm20/bin/clangd"
# You can add clangd arguments here if needed, e.g.:
# args = ["--clang-tidy", "--compile-commands-dir=."]

[language-server.pylsp]
command = "pylsp"

[language-server.ruff]
command = "ruff"
args = ["server"]
# Optional: Ruff server specific settings if not using pyproject.toml/ruff.toml exclusively for these
# [language-server.ruff.config.settings]
# lineLength = 88
# logLevel = "info" # "debug" for more verbosity
#
# [language-server.ruff.config.settings.lint]
# select = ["E", "F", "I"] # Example: select some common rule sets
# preview = false
#
# [language-server.ruff.config.settings.format]
# preview = true


[language-server.typescript-language-server]
command = "typescript-language-server"
args = ["--stdio"]

[language-server.json-language-server]
command = "json-language-server"
args = ["--stdio"]

[language-server.taplo-lsp]
command = "taplo"
args = ["lsp", "stdio"]

[language-server.yaml-language-server]
command = "yaml-language-server"
args = ["--stdio"]

[language-server.marksman]
command = "marksman"

[language-server.zls]
command = "zls"

[language-server.rust-analyzer]
command = "rust-analyzer"
[language-server.rust-analyzer.config]
check = { command = "clippy" }

